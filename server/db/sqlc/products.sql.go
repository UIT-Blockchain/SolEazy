// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: products.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO
  "products" (
    "pid",
    "name",
    "description",
    "unitName",
    "priceSol",
    "priceUsd"
  )
VALUES
  ($1, $2, $3, $4, $5, $6) RETURNING id, pid, name, description, "unitName", "priceSol", "priceUsd", created_at
`

type CreateProductParams struct {
	Pid         string  `json:"pid"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	UnitName    string  `json:"unitName"`
	PriceSol    float64 `json:"priceSol"`
	PriceUsd    float64 `json:"priceUsd"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Pid,
		arg.Name,
		arg.Description,
		arg.UnitName,
		arg.PriceSol,
		arg.PriceUsd,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Name,
		&i.Description,
		&i.UnitName,
		&i.PriceSol,
		&i.PriceUsd,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT
  id, pid, name, description, "unitName", "priceSol", "priceUsd", created_at
FROM
  "products"
WHERE
  name = $1
LIMIT
  1
`

func (q *Queries) GetProduct(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Pid,
		&i.Name,
		&i.Description,
		&i.UnitName,
		&i.PriceSol,
		&i.PriceUsd,
		&i.CreatedAt,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
  id, pid, name, description, "unitName", "priceSol", "priceUsd", created_at
FROM
 products 
ORDER BY
  id
LIMIT
  $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Pid,
			&i.Name,
			&i.Description,
			&i.UnitName,
			&i.PriceSol,
			&i.PriceUsd,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
