package db

import (
	"context"
	"database/sql"
	"fmt"
)

type Store interface {
	// TODO: add functions to this interface
	Querier
}

type SQLStore struct {
	*Queries
	// this object is used to create a new db transaction.
	db *sql.DB
}

//Although we have changed the Store type from struct to interface, our code will still work well,
//and we don’t have to change anything in the main.go file because the db.NewStore() function
//is now also returning a Store interface with the actual implementation SQLStore that connects to the real SQL DB

func NewStore(db *sql.DB) Store {
	// The New() function was generated by sqlc as we’ve already known in the previous lectures. It creates and returns a Queries object.
	//why Store -> return &SQLStore
	return &SQLStore{
		db:      db,
		Queries: New(db),
	}
}

//execTx executes a function within a database transaction
//this function is unexported (it starts with a lowercase letter e), because we don’t want external package to call it directly. Instead, we will provide an exported function for each specific transaction.

func (store *SQLStore) execTx(ctx context.Context, fn func(*Queries) error) error {
	tx, err := store.db.BeginTx(ctx, &sql.TxOptions{})
	if err != nil {
		return err
	}
	q := New(tx)
	err = fn(q)
	if err != nil {
		if rbErr := tx.Rollback(); rbErr != nil {
			return fmt.Errorf("tx err: %v, rb err: %v", err, rbErr)
		}
		return err
	}
	return tx.Commit()
}
